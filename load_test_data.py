import os
import random

import django

# ‚úÖ Configuration Django AVANT les imports de mod√®les
os.environ.setdefault(
    "DJANGO_SETTINGS_MODULE", "LITRevuProject.settings"
)  # Remplace par le bon nom
django.setup()

from django.contrib.auth import get_user_model

from listings.models import (  # Remplace "listings" par ton application r√©elle
    Review,
    Ticket,
)

# ‚úÖ Donn√©es r√©alistes pour les tests
USERNAMES = ["alice", "bob", "charlie", "diana", "emma", "frank", "george", "hannah"]
PASSWORD = "Test1234"

TICKET_TITLES = [
    "Erreur critique sur le site",
    "Am√©lioration de l'interface utilisateur",
    "Probl√®me d'affichage mobile",
    "Demande de nouvelle fonctionnalit√©",
    "Bug lors de l'inscription",
    "Optimisation des performances",
    "S√©curit√© des donn√©es √† revoir",
    "Refonte du design du tableau de bord",
]

TICKET_DESCRIPTIONS = [
    "Le site plante apr√®s l'envoi du formulaire de contact.",
    "L'UX pourrait √™tre am√©lior√©e en ajoutant des animations plus fluides.",
    "Sur mobile, les boutons sont trop petits et difficiles √† cliquer.",
    "Une fonctionnalit√© permettant de filtrer les tickets serait tr√®s utile.",
    "L'inscription ne fonctionne pas avec certaines adresses email.",
    "Le chargement de la page d'accueil est trop lent, optimisation n√©cessaire.",
    "Le stockage des mots de passe ne semble pas s√©curis√©, v√©rifier le chiffrement.",
    "Un redesign du tableau de bord rendrait l'interface plus agr√©able.",
]

REVIEW_HEADLINES = [
    "Exp√©rience incroyable",
    "Peut mieux faire",
    "Super service client",
    "Trop de bugs",
    "Interface fluide et agr√©able",
    "Difficile √† utiliser",
    "Excellente am√©lioration",
    "Manque quelques fonctionnalit√©s",
]

REVIEW_BODIES = [
    "J'ai ador√© utiliser cette application, tr√®s intuitive !",
    "Quelques bugs mineurs mais globalement une bonne exp√©rience.",
    "Service client r√©actif et √† l'√©coute, c'est appr√©ciable.",
    "Trop de crashs et de bugs, cela nuit √† l'exp√©rience utilisateur.",
    "L'application est bien pens√©e et agr√©able √† utiliser.",
    "Difficile √† comprendre pour un nouvel utilisateur, manque de tutoriels.",
    "Les mises √† jour r√©centes ont apport√© beaucoup d'am√©liorations.",
    "Certaines fonctionnalit√©s sont absentes mais √ßa reste correct.",
]


def load_test_data():
    """Ajoute des donn√©es de test SANS supprimer les anciennes."""
    print("üöÄ Chargement des donn√©es de test...")

    User = get_user_model()
    users = []

    # ‚úÖ Ajouter des utilisateurs de test UNIQUEMENT s'ils n'existent pas d√©j√†
    for username in USERNAMES:
        user, created = User.objects.get_or_create(username=username)
        if created:
            user.set_password(PASSWORD)
            user.save()
            print(f"üë§ Utilisateur cr√©√© : {username}")
        users.append(user)

    # ‚úÖ Ajouter des tickets de test (√©vite les doublons)
    for _ in range(20):
        user = random.choice(users)
        title = random.choice(TICKET_TITLES)
        description = random.choice(TICKET_DESCRIPTIONS)

        # V√©rifie si un ticket avec ce titre existe d√©j√†
        if not Ticket.objects.filter(title=title, user=user).exists():
            ticket = Ticket.objects.create(
                title=title, description=description, user=user
            )
            print(f"üé´ Ticket ajout√© : {title} (par {user.username})")

    # ‚úÖ Ajouter des critiques de test (avec un Ticket obligatoire)
    for _ in range(20):
        user = random.choice(users)
        headline = random.choice(REVIEW_HEADLINES)
        body = random.choice(REVIEW_BODIES)
        rating = random.randint(1, 5)

        # üü¢ S√©lectionner un ticket al√©atoire existant (OBLIGATOIRE)
        ticket = Ticket.objects.order_by("?").first()  # R√©cup√®re un ticket au hasard

        if ticket:  # V√©rifie qu'un ticket existe avant de cr√©er la review
            review = Review.objects.create(
                headline=headline,
                body=body,
                rating=rating,
                user=user,
                ticket=ticket,  # üî¥ Ajoute un Ticket obligatoire ici
            )
            print(
                f"‚≠ê Critique ajout√©e : {headline} (Note: {rating}/5 par {user.username}, pour le ticket '{ticket.title}')"
            )
        else:
            print("‚ùå Aucune critique ajout√©e car aucun ticket disponible.")


if __name__ == "__main__":
    load_test_data()
